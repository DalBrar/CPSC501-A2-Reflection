======================================================
Filename: script0.txt
Running Test: ClassA
Recursive: true
	public abstract interface Animal {
	// Methods
	public abstract void sleep() 
	public abstract void animalSound() 
	
	// Fields
	public static final int tick = 99
	}

public final class ClassT implements Animal {
// Constructors
public ClassT() 
public ClassT(int) 

// Methods
public void run() 
public String toString() 
public void sleep() 
public void setVal(int) throws Exception
public int getVal() 
public void animalSound() 
private static void printSomething() 

// Fields
private int val = 55
private double val2 = 2.2
private boolean val3 = true
}

======================================================
======================================================
Filename: script1.txt
Running Test: ClassA
Recursive: true
	public abstract interface Serializable {
	}

	public abstract interface Runnable {
	// Methods
	public abstract void run() 
	
	}

public final class ClassA implements Serializable, Runnable {
// Constructors
public ClassA() 
public ClassA(int) 

// Methods
public void run() 
public String toString() 
public void setVal(int) throws Exception
public int getVal() 
private void printSomething() 

// Fields
private int val = 3
private double val2 = 0.2
private boolean val3 = true
}

======================================================
======================================================
Filename: script2.txt
Running Test: ClassA
Recursive: true
	public abstract interface Serializable {
	}

	public abstract interface Runnable {
	// Methods
	public abstract void run() 
	
	}

public final class ClassA implements Serializable, Runnable {
// Constructors
public ClassA() 
public ClassA(int) 

// Methods
public void run() 
public String toString() 
public void setVal(int) throws Exception
public int getVal() 
private void printSomething() 

// Fields
private int val = 12
private double val2 = 0.2
private boolean val3 = true
}

======================================================
======================================================
Filename: script3.txt
Running Test: ClassB
Recursive: true
				public abstract interface Serializable {
				}

				public abstract interface Runnable {
				// Methods
				public abstract void run() 
				
				}

			public final class ClassA implements Serializable, Runnable {
			// Constructors
			public ClassA() 
			public ClassA(int) 
			
			// Methods
			public void run() 
			public String toString() 
			public void setVal(int) throws Exception
			public int getVal() 
			private void printSomething() 
			
			// Fields
			private int val = 17
			private double val2 = 0.2
			private boolean val3 = true
			}

				public abstract interface Cloneable {
				}

				public abstract interface Serializable {
				}

			public final abstract class ClassA[] implements Cloneable, Serializable {
			}

		public class ClassD {
		// Constructors
		public ClassD() 
		public ClassD(int) 
		
		// Methods
		public String toString() 
		public int getVal3() 
		
		// Fields
		private ClassA val = ClassA@135fbaa4
		private static ClassA val2 = null
		private int val3 = 34
		private ClassA[] vallarray = ClassA[]@2503dbd3
		}

			public abstract interface InterfaceB {
			// Methods
			public abstract void func0(int, boolean) throws Exception
			
			}

		public abstract interface InterfaceA implements InterfaceB {
		// Methods
		public abstract void func1(int, double, boolean, String) throws Exception
		public abstract int func2(String) throws Exception, ArithmeticException, IllegalMonitorStateException
		
		}

			public abstract interface Serializable {
			}

			public abstract interface Runnable {
			// Methods
			public abstract void run() 
			
			}

		public final class ClassA implements Serializable, Runnable {
		// Constructors
		public ClassA() 
		public ClassA(int) 
		
		// Methods
		public void run() 
		public String toString() 
		public void setVal(int) throws Exception
		public int getVal() 
		private void printSomething() 
		
		// Fields
		private int val = 100
		private double val2 = 0.2
		private boolean val3 = true
		}

			public abstract interface Serializable {
			}

			public abstract interface Runnable {
			// Methods
			public abstract void run() 
			
			}

		public final class ClassA implements Serializable, Runnable {
		// Constructors
		public ClassA() 
		public ClassA(int) 
		
		// Methods
		public void run() 
		public String toString() 
		public void setVal(int) throws Exception
		public int getVal() 
		private void printSomething() 
		
		// Fields
		private int val = 2
		private double val2 = 0.2
		private boolean val3 = true
		}

			public abstract interface Serializable {
			}

			public abstract interface Runnable {
			// Methods
			public abstract void run() 
			
			}

		public final class ClassA implements Serializable, Runnable {
		// Constructors
		public ClassA() 
		public ClassA(int) 
		
		// Methods
		public void run() 
		public String toString() 
		public void setVal(int) throws Exception
		public int getVal() 
		private void printSomething() 
		
		// Fields
		private int val = 3
		private double val2 = 0.2
		private boolean val3 = true
		}

	public abstract class ClassC extends ClassD implements InterfaceA {
	// Constructors
	public ClassC() 
	public ClassC(int, int) 
	
	// Methods
	public void run() 
	public String toString() 
	public abstract void func3(int) 
	public void func1(int, double, boolean, String) throws Exception
	public void func0(int, boolean) throws Exception
	public int func2(String) throws Exception, ArithmeticException, IllegalMonitorStateException
	
	// Fields
	private ClassA val2 = ClassA@29453f44
	private ClassA val3 = ClassA@5cad8086
	private ClassA val4 = ClassA@6e0be858
	}

	public abstract interface Runnable {
	// Methods
	public abstract void run() 
	
	}

		public abstract interface Serializable {
		}

		public abstract interface Runnable {
		// Methods
		public abstract void run() 
		
		}

	public final class ClassA implements Serializable, Runnable {
	// Constructors
	public ClassA() 
	public ClassA(int) 
	
	// Methods
	public void run() 
	public String toString() 
	public void setVal(int) throws Exception
	public int getVal() 
	private void printSomething() 
	
	// Fields
	private int val = 3
	private double val2 = 0.2
	private boolean val3 = true
	}

		public abstract interface Serializable {
		}

		public abstract interface Runnable {
		// Methods
		public abstract void run() 
		
		}

	public final class ClassA implements Serializable, Runnable {
	// Constructors
	public ClassA() 
	public ClassA(int) 
	
	// Methods
	public void run() 
	public String toString() 
	public void setVal(int) throws Exception
	public int getVal() 
	private void printSomething() 
	
	// Fields
	private int val = 12
	private double val2 = 0.2
	private boolean val3 = true
	}

public class ClassB extends ClassC implements Runnable {
// Constructors
public ClassB() throws Exception

// Methods
public void run() 
public String toString() 
public void func3(int) 

// Fields
private ClassA val = ClassA@610455d6
private ClassA val2 = ClassA@511d50c0
private ClassA val3 = null
}

======================================================
======================================================
Filename: script4.txt
Running Test: ClassD
Recursive: true
		public abstract interface Serializable {
		}

		public abstract interface Runnable {
		// Methods
		public abstract void run() 
		
		}

	public final class ClassA implements Serializable, Runnable {
	// Constructors
	public ClassA() 
	public ClassA(int) 
	
	// Methods
	public void run() 
	public String toString() 
	public void setVal(int) throws Exception
	public int getVal() 
	private void printSomething() 
	
	// Fields
	private int val = 17
	private double val2 = 0.2
	private boolean val3 = true
	}

		public abstract interface Cloneable {
		}

		public abstract interface Serializable {
		}

	public final abstract class ClassA[] implements Cloneable, Serializable {
	}

public class ClassD {
// Constructors
public ClassD() 
public ClassD(int) 

// Methods
public String toString() 
public int getVal3() 

// Fields
private ClassA val = ClassA@60e53b93
private static ClassA val2 = null
private int val3 = 32
private ClassA[] vallarray = ClassA[]@5e2de80c
}

======================================================
======================================================
Filename: script5.txt
Running Test: ClassD
Recursive: true
		public abstract interface Serializable {
		}

		public abstract interface Runnable {
		// Methods
		public abstract void run() 
		
		}

	public final class ClassA implements Serializable, Runnable {
	// Constructors
	public ClassA() 
	public ClassA(int) 
	
	// Methods
	public void run() 
	public String toString() 
	public void setVal(int) throws Exception
	public int getVal() 
	private void printSomething() 
	
	// Fields
	private int val = 17
	private double val2 = 0.2
	private boolean val3 = true
	}

		public abstract interface Cloneable {
		}

		public abstract interface Serializable {
		}

	public final abstract class ClassA[] implements Cloneable, Serializable {
	}

public class ClassD {
// Constructors
public ClassD() 
public ClassD(int) 

// Methods
public String toString() 
public int getVal3() 

// Fields
private ClassA val = ClassA@1d44bcfa
private static ClassA val2 = null
private int val3 = 34
private ClassA[] vallarray = ClassA[]@266474c2
}

======================================================
======================================================
Filename: script6.txt
Running Test: [LClassB;@6f94fa3e
Recursive: true
	public abstract interface Cloneable {
	}

	public abstract interface Serializable {
	}

public final abstract class ClassB[] implements Cloneable, Serializable {
}

======================================================
======================================================
Filename: script7.txt
Running Test: [[LClassB;@66d3c617
Recursive: true
	public abstract interface Cloneable {
	}

	public abstract interface Serializable {
	}

public final abstract class ClassB[][] implements Cloneable, Serializable {
}

======================================================
======================================================
Filename: script8.txt
Running Test: Test String
Recursive: true
	public abstract interface Serializable {
	}

	public abstract interface Comparable {
	// Methods
	public abstract int compareTo(Object) 
	
	}

	public abstract interface CharSequence {
	// Methods
	public abstract String toString() 
	public abstract char charAt(int) 
	public abstract int length() 
	public abstract CharSequence subSequence(int, int) 
	public IntStream chars() 
	public IntStream codePoints() 
	private OfInt lambda$chars$0() 
	private OfInt lambda$codePoints$1() 
	
	}

		public abstract interface Cloneable {
		}

		public abstract interface Serializable {
		}

	public final abstract class char[] implements Cloneable, Serializable {
	}

		public abstract interface Cloneable {
		}

		public abstract interface Serializable {
		}

	public final abstract class ObjectStreamField[] implements Cloneable, Serializable {
	}

		public abstract interface Comparator {
		// Methods
		public abstract boolean equals(Object) 
		public abstract int compare(Object, Object) 
		private static Object $deserializeLambda$(SerializedLambda) 
		public static Comparator comparing(Function, Comparator) 
		public static Comparator comparing(Function) 
		public static Comparator comparingDouble(ToDoubleFunction) 
		public static Comparator comparingInt(ToIntFunction) 
		public static Comparator comparingLong(ToLongFunction) 
		private static int lambda$comparing$77a9974f$1(Function, Object, Object) 
		private static int lambda$comparing$ea9a8b3a$1(Comparator, Function, Object, Object) 
		private static int lambda$comparingDouble$8dcf42ea$1(ToDoubleFunction, Object, Object) 
		private static int lambda$comparingInt$7b0bb60$1(ToIntFunction, Object, Object) 
		private static int lambda$comparingLong$6043328a$1(ToLongFunction, Object, Object) 
		private int lambda$thenComparing$36697e65$1(Comparator, Object, Object) 
		public static Comparator naturalOrder() 
		public static Comparator nullsFirst(Comparator) 
		public static Comparator nullsLast(Comparator) 
		public static Comparator reverseOrder() 
		public Comparator reversed() 
		public Comparator thenComparing(Function) 
		public Comparator thenComparing(Comparator) 
		public Comparator thenComparing(Function, Comparator) 
		public Comparator thenComparingDouble(ToDoubleFunction) 
		public Comparator thenComparingInt(ToIntFunction) 
		public Comparator thenComparingLong(ToLongFunction) 
		
		}

		public abstract interface Serializable {
		}

	private static class CaseInsensitiveComparator implements Comparator, Serializable {
	// Constructors
	 CaseInsensitiveComparator() 
	private CaseInsensitiveComparator() 
	
	// Methods
	public volatile int compare(Object, Object) 
	public int compare(String, String) 
	private Object readResolve() 
	
	// Fields
	private static final long serialVersionUID = 8575799808933029326
	}

public final class String implements Serializable, Comparable, CharSequence {
// Constructors
public String(byte[], int, int) 
public String(byte[], Charset) 
public String(byte[], String) throws UnsupportedEncodingException
public String(byte[], int, int, Charset) 
public String(byte[], int, int, String) throws UnsupportedEncodingException
 String(char[], boolean) 
public String(StringBuilder) 
public String(StringBuffer) 
public String(byte[]) 
public String(int[], int, int) 
public String() 
public String(char[]) 
public String(String) 
public String(char[], int, int) 
public String(byte[], int) 
public String(byte[], int, int, int) 

// Methods
public boolean equals(Object) 
public String toString() 
public int hashCode() 
public int compareTo(String) 
public volatile int compareTo(Object) 
public int indexOf(String, int) 
public int indexOf(String) 
public int indexOf(int, int) 
public int indexOf(int) 
static int indexOf(char[], int, int, char[], int, int, int) 
static int indexOf(char[], int, int, String, int) 
public static String valueOf(int) 
public static String valueOf(long) 
public static String valueOf(float) 
public static String valueOf(boolean) 
public static String valueOf(char[]) 
public static String valueOf(char[], int, int) 
public static String valueOf(Object) 
public static String valueOf(char) 
public static String valueOf(double) 
public char charAt(int) 
private static void checkBounds(byte[], int, int) 
public int codePointAt(int) 
public int codePointBefore(int) 
public int codePointCount(int, int) 
public int compareToIgnoreCase(String) 
public String concat(String) 
public boolean contains(CharSequence) 
public boolean contentEquals(CharSequence) 
public boolean contentEquals(StringBuffer) 
public static String copyValueOf(char[]) 
public static String copyValueOf(char[], int, int) 
public boolean endsWith(String) 
public boolean equalsIgnoreCase(String) 
public static transient String format(Locale, String, Object[]) 
public static transient String format(String, Object[]) 
public void getBytes(int, int, byte[], int) 
public byte[] getBytes(Charset) 
public byte[] getBytes(String) throws UnsupportedEncodingException
public byte[] getBytes() 
public void getChars(int, int, char[], int) 
 void getChars(char[], int) 
private int indexOfSupplementary(int, int) 
public native String intern() 
public boolean isEmpty() 
public static transient String join(CharSequence, CharSequence[]) 
public static String join(CharSequence, Iterable) 
public int lastIndexOf(int) 
public int lastIndexOf(String) 
static int lastIndexOf(char[], int, int, String, int) 
public int lastIndexOf(String, int) 
public int lastIndexOf(int, int) 
static int lastIndexOf(char[], int, int, char[], int, int, int) 
private int lastIndexOfSupplementary(int, int) 
public int length() 
public boolean matches(String) 
private boolean nonSyncContentEquals(AbstractStringBuilder) 
public int offsetByCodePoints(int, int) 
public boolean regionMatches(int, String, int, int) 
public boolean regionMatches(boolean, int, String, int, int) 
public String replace(char, char) 
public String replace(CharSequence, CharSequence) 
public String replaceAll(String, String) 
public String replaceFirst(String, String) 
public String[] split(String) 
public String[] split(String, int) 
public boolean startsWith(String, int) 
public boolean startsWith(String) 
public CharSequence subSequence(int, int) 
public String substring(int) 
public String substring(int, int) 
public char[] toCharArray() 
public String toLowerCase(Locale) 
public String toLowerCase() 
public String toUpperCase() 
public String toUpperCase(Locale) 
public String trim() 

// Fields
private final char[] value = char[]@d716361
private int hash = 0
private static final long serialVersionUID = -6849794470754667710
private static final ObjectStreamField[] serialPersistentFields = java.io.ObjectStreamField[]@3764951d
public static final Comparator CASE_INSENSITIVE_ORDER = java.lang.String.CaseInsensitiveComparator@3cd1a2f1
}

======================================================
